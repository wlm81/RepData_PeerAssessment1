q()
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.table(unz(temp, "activity.zip"))
unlink(temp)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.table(unz(temp, "repdata%2Fdata%2Factivity.zip"))
unlink(temp)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.table(unz(temp, "activity.zip"))
unlink(temp)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.table(unz(temp, "repdata%2Fdata%2Factivity.zip"))
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.table(unz(temp, "repdata%2Fdata%2Factivity.zip"))
data <- read.csv(unz(temp, "repdata%2Fdata%2Factivity.zip"))
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.csv(unz(temp, "repdata%2Fdata%2Factivity.zip"))
unlink(temp)
unzip(temp)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
unzip(temp)
unzip(zipfile=temp)
data <- unzip(zipfile=temp)
activitydata <- read.csv(data)
View(activitydata)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
activitydata <- read.csv(unzip(zipfile=temp))
unlink(temp)
stepsByDay <- tapply(activitydata$steps, activitydata$date, sum, na.rm=TRUE)
stepsByDay()
stepsByDay
gplot(hwy, data=dailyMean )
library(ggplot)
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(hwy, data=dailyMean )
qplot(hwy, data=dailyMean, geom='histogram')
qplot(hwy, data='dailyMean', geom='histogram')
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500)
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500')
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=1000)
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=2000)
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=3000)
hist(stepsByDay)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
activityData <- read.csv(unzip(zipfile=temp))
unlink(temp)
```
library(ggplot2)
dailyMean <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(dailyMean)
rmean <- mean(steps_by_day$steps)
rmedian <- median(steps_by_day$steps)
stepDailyMean <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(dailyMean)
rmean <- mean(stepDailyMean$steps)
rmedian <- median(stepDailyMean$steps)
mean(stepDailyMean$steps)
mean(stepDailyMean)
library(ggplot2)
stepDailyMean <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(dailyMean)
dailyMean <- mean(activityData$steps)
dailyMedian <- median(activityData$steps)
library(ggplot2)
stepDailyMean <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(dailyMean)
dailyMean <- mean(activityData$steps)
dailyMedian <- median(activityData$steps)
dailyMean
dailyMedian
library(ggplot2)
stepDailyMean <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(dailyMean)
dailyMean <- mean(activityData$steps, na.rm = TRUE)
dailyMedian <- median(activityData$steps, na.rm = TRUE)
library(ggplot2)
stepDailyMean <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(stepDailyMean)
dailyMean <- mean(activityData$steps, na.rm = TRUE)
dailyMedian <- median(activityData$steps, na.rm = TRUE)
```
hist(stepDailyMean)
hist(stepDailyMean, xlab='Daily Total Steps')
library(ggplot2)
stepDailyMean <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(stepDailyMean, col='green')
dailyMean <- mean(activityData$steps, na.rm = TRUE)
dailyMedian <- median(activityData$steps, na.rm = TRUE)
hist(activityData$steps, col='green', xlab='Number of Steps Each Day')
hist(stepDailyMean, col='green', xlab='Number of Steps Each Day')
activityData <- read.csv(unzip(zipfile='activity.zip'))
setwd("~/")
setwd("D:\rWork\RepData_PeerAssessment1")
setwd("D:/rWork/RepData_PeerAssessment1")
activityData <- read.csv(unzip(zipfile='activity.zip'))
activityData <- read.csv(unzip(zipfile='activity.zip'))
library(ggplot2)
stepDailyMean <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(stepDailyMean, col='green', xlab='Total Number of Steps Each Day')
dailyMean <- mean(activityData$steps, na.rm = TRUE)
dailyMedian <- median(activityData$steps, na.rm = TRUE)
-
## Loading and preprocessing the data
```{r processfile, echo=TRUE}
activityData <- read.csv(unzip(zipfile='activity.zip'))
```
## What is mean total number of steps taken per day?
```{r dailyMean, echo=TRUE}
library(ggplot2)
stepDailyMean <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(stepDailyMean, col='green', xlab='Total Number of Steps Each Day')
dailyMean <- mean(activityData$steps, na.rm = TRUE)
dailyMedian <- median(activityData$steps, na.rm = TRUE)
```
The mean is r dailyMean and the median is r dailyMedian.
## What is the average daily activity pattern?
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv")
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
library(ggplot2)
stepDailyMean <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(stepDailyMean, col='green', xlab='Total Number of Steps Each Day')
dailyMean <- mean(stepDailyMean, na.rm = TRUE)
dailyMedian <- median(stepDailyMean, na.rm = TRUE)
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
intervalAverages <- aggregate(steps ~ interval, data, mean, na.rm=TRUE)
View(intervalAverages)
View(intervalAverages)
ggplot(data=intervalAverages, aes(x=interval, y=steps)) +
geom_line() +
xlab("Intervals in minutes") +
ylab("Average number of steps for interval across the month")
ggplot(data=intervalAverages, aes(x=interval, y=steps))
+ geom_line()
+ xlab('Intervals in minutes')
+ ylab('Average number of steps')
+ main('for interval across the month')
ggplot(data=intervalAverages, aes(x=interval, y=steps)
+ geom_line()
ggplot(data=intervalAverages, aes(x=interval, y=steps)
+ geom_line()
+ xlab('Intervals in minutes')
+ ylab('Average number of steps')
+ ggtitle('for interval across the month')
ggplot(data=intervalAverages, aes(x=interval, y=steps)
+ geom_line()
+ xlab('Intervals in minutes')
ggplot(data=intervalAverages, aes(x=interval, y=steps)
+ geom_line()
+ xlab('Intervals in minutes')
intervalAverages <- aggregate(steps ~ interval, data, mean, na.rm=TRUE)
ggplot(data=intervalAverages, aes(x=interval, y=steps)
+ geom_line()
+ xlab('Intervals in minutes')
intervalAverages <- aggregate(steps ~ interval, data, mean, na.rm=TRUE)
ggplot(data=intervalAverages, aes(x=interval, y=steps)
+ geom_line()
+ xlab('Intervals in minutes')
+ ylab('Average number of steps')
+ ggtitle('for interval across the month')
intervalAverages <- aggregate(steps ~ interval, data, mean, na.rm=TRUE)
ggplot(data=intervalAverages, aes(x=interval, y=steps)
+ geom_line()
+ xlab("Intervals in minutes")
+ ylab("Average number of steps")
+ ggtitle("for interval across the month")
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r processfile, echo=TRUE}
activityData <- read.csv(unzip(zipfile='activity.zip'))
```
## What is mean total number of steps taken per day?
```{r dailyMean, echo=TRUE}
library(ggplot2)
stepDailyMean <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(stepDailyMean, col='green', xlab='Total Number of Steps Each Day')
dailyMean <- mean(stepDailyMean, na.rm = TRUE)
dailyMedian <- median(stepDailyMean, na.rm = TRUE)
```
The mean is r dailyMean and the median is r dailyMedian.
## What is the average daily activity pattern?
```{r dailyPattern, echo=TRUE}
intervalAverages <- aggregate(steps ~ interval, data, mean, na.rm=TRUE)
ggplot(data=intervalAverages, aes(x=interval, y=steps)
+ geom_line()
+ xlab("Intervals in minutes")
+ ylab("Average number of steps")
+ ggtitle("for interval across the month")
'''
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
ggplot(data=intervalAverages, aes(x=interval, y=steps)
+ geom_line()
+ xlab("Intervals in minutes")
+ ylab("Average number of steps")
+ ggtitle("for interval across the month")
intervalAverages <- aggregate(steps ~ interval, data, mean, na.rm=TRUE)
intervalAverages <- aggregate(steps ~ interval, data, mean, na.rm=TRUE)
intervalAverages <- aggregate(steps ~ interval, activityData, mean, na.rm=TRUE)
View(intervalAverages)
View(intervalAverages)
plot(intervalAverages$interval,intervalAverages$steps, type="l", xlab="Interval", ylab="Number of Steps",main="Average Number of Steps per Interval")
maxAverage <- intervalAverages[which.max(intervalAverages$steps),]
View(maxAverage)
View(maxAverage)
maxAverage[steps]
maxAverage[step]
maxAverage[interval]
maxAverage$interval
maxAverage$steps
intervalAverages <- aggregate(steps ~ interval, activityData, mean, na.rm=TRUE)
intervalAverages <- aggregate(steps ~ interval, activityData, mean)
View(intervalAverages)
View(intervalAverages)
intervalAverages <- aggregate(x=list(steps=activityData$steps), by=list(interval=activityData$interval),
FUN=mean, na.rm=TRUE)
plot(intervalAverages$interval,intervalAverages$steps, type="l", xlab="Interval", ylab="Number of Steps",
main="Average Number of Steps per Interval")
maxAverage <- intervalAverages[which.max(intervalAverages$steps),]
sum(is.na(activityData$steps)
)
sum(is.na(activityData))
newActivityData <- activityData
for (i in 1:nrow(newActivityData)) {
if (is.na(newActivityData$steps[i])) {
newActivityData$steps[i] <- intervalAverages[which(newActivityData$interval[i] == intervalAverages$interval), ]$meanOfSteps
}
}
newActivityData <- activityData
for (i in 1:nrow(newActivityData)) {
if (is.na(newActivityData$steps[i])) {
newActivityData$steps[i] <- intervalAverages[which(newActivityData$interval[i] == intervalAverages$interval), ]$meanOfSteps
}
}
View(intervalAverages)
intervalAverages$steps[,10]
intervalAverages$steps[10,]
intervalAverages$steps
intervalAverages$steps[10]
intervalAverages$interval
intervalAverages[interval=10,]
intervalAverages[10,]
intervalAverages[10,]$steps
intervalAverages[10,]
intervalAverages[intervalAverages$interval==10,]
intervalAverages[intervalAverages$interval==10,]$steps
newActivityData <- activityData
for (i in 1:nrow(newActivityData)) {
if (is.na(newActivityData$steps[i])) {
newActivityData$steps[i] <- intervalAverages[intervalAverages$interval==newActivityData$interval[i]]$steps
}
}
for (i in 1:nrow(newActivityData)) {
if (is.na(newActivityData$steps[i])) {
newActivityData$steps[i] <- intervalAverages[intervalAverages$interval==newActivityData$interval[i]]$steps
}
}
newActivityData$steps[i] <- intervalAverages[intervalAverages$interval==newActivityData$interval[i]]$steps
i<-1
newActivityData$steps[i] <- intervalAverages[intervalAverages$interval==newActivityData$interval[i]]$steps
i<-2
newActivityData$steps[i] <- intervalAverages[intervalAverages$interval==newActivityData$interval[i]]$steps
intervalAverages[intervalAverages$interval==newActivityData$interval[1]]$steps
intervalAverages[intervalAverages$interval==newActivityData$interval[2]]$steps
intervalAverages[intervalAverages$interval==newActivityData$interval[3]]$steps
intervalAverages[intervalAverages$interval==newActivityData$interval[2]]$steps
newActivityData$interval[2]]$steps
newActivityData$interval[2]$steps
newActivityData$interval$steps
newActivityData$interval[2]
newActivityData$interval[3]
intervalAverages[newActivityData$interval[2]]$steps
intervalAverages[newActivityData$interval[1]]$steps
intervalAverages[newActivityData$interval[2]]$steps
intervalAverages[newActivityData$interval[2]]
intervalAverages[newActivityData$interval[3]]
intervalAverages[intervalAverages$interval==newActivityData$interval[3]]
intervalAverages[which(intervalAverages$interval==newActivityData$interval[3])]$steps
intervalAverages[which(intervalAverages$interval==newActivityData$interval[3])]
intervalAverages[which(intervalAverages$interval==newActivityData$interval[1])]
intervalAverages[which(intervalAverages$interval==newActivityData$interval)]
newActivityData <- activityData
for (i in 1:nrow(newActivityData)) {
if (is.na(newActivityData$steps[i])) {
newActivityData$steps[i] <- intervalAverages[which(newActivityData$interval[i] == intervalAverages$interval), ]$intervalAverages
}
}
for (i in 1:nrow(newActivityData)) {
if (is.na(newActivityData$steps[i])) {
newActivityData$steps[i] <- 999
}
}
View(newActivityData)
View(newActivityData)
newActivityData <- activityData
newActivityData$interval[i]
i
newActivityData$interval[17568]
intervalAverages
intervalAverages[2355,]
intervalAverages$interval[2355,]
intervalAverages$interval
intervalAverages$(interval==2355)
intervalAverages[interval==2355,]
intervalAverages
intervalAverages$interval
intervalAverages$interval[2355]
intervalAverages$interval[2350]
intervalAverages$interval[2100]
intervalAverages$interval[2100,]
intervalAverages$interval[2100]
intervalAverages$interval[210]
intervalAverages$interval[2200]
intervalAverages$interval[280]
intervalAverages$interval==2355
intervalAverages$steps[intervalAverages$interval==2355]
i
intervalAverages$steps[intervalAverages$interval==intervalAveraage$interval[i]]
intervalAverages$steps[intervalAverages$interval==intervalAverages$interval[i]]
intervalAverages$steps[intervalAverages$interval==intervalAverages$interval[1]]
intervalAverages$steps[intervalAverages$interval==intervalAverages$interval[2]]
intervalAverages$steps[intervalAverages$interval==2355]
intervalAverages$steps[intervalAverages$interval==1]
intervalAverages$steps[intervalAverages$interval==0]
intervalAverages$interval==0
intervalAverages$steps[intervalAverages$interval==2355]
newActivityData$interval[i]
intervalAverages$steps[intervalAverages$interval==newActivityData$interval[i]]
newActivityData <- activityData
for (i in 1:nrow(newActivityData)) {
if (is.na(newActivityData$steps[i])) {
newActivityData$steps[i] <- intervalAverages$steps[intervalAverages$interval==newActivityData$interval[i]]
}
}
sum(is.na(activityData))
sum(is.na(newActivityData))
newStepDailyMean <- tapply(newActivityData$steps, newActivityData$date, sum)
hist(newStepDailyMean, col='blue', xlab='Total Number of Steps Each Day')
newDailyMean <- mean(newStepDailyMean)
newDailyMedian <- median(newStepDailyMean)
newStepDailyMean
newActivityData$steps
newActivityData
stepDailyMean
stepDailyMean$steps
library(timeDate)
isWeekday(df1$date, wday=1:5)
library(timeDate)
isWeekday(newActivityData$date, wday=1:5)
install.packages("timeDate")
library(timeDate)
library(timeDate)
isWeekday(newActivityData$date, wday=1:5)
newActivityData$Weekday <- isWeekday(newActivityData$date, wday=1:5)
weekdays()
if(isWeekday(newActivityData$date, wday=1:5),Weekday)weekday)
if(isWeekday(newActivityData$date, wday=1:5){Wday <- WEEKDAY}
if((isWeekday(newActivityData$date, wday=1:5)=TRUE){Wday <- WEEKDAY}
if((isWeekday(newActivityData$date, wday=1:5)=TRUE){Wday <- WEEKDAY}
if((isWeekday(newActivityData$date, wday=1:5))=TRUE)
{Wday <- WEEKDAY}
if((isWeekday(newActivityData$date, wday=1:5))=TRUE)
{Wday <- "WEEKDAY""}
if((isWeekday(newActivityData$date, wday=1:5))=TRUE)
{Wday <- "WEEKDAY}
if((isWeekday(newActivityData$date, wday=1:5))=TRUE)
{newActivityData$Wday <- "WEEKDAY}
if((isWeekday(newActivityData$date, wday=1:5)) is TRUE)
{newActivityData$Wday <- "WEEKDAY}
if((isWeekday(newActivityData$date, wday=1:5)) is TRUE)
{newActivityData$Wday <- "WEEKDAY}
if(isWeekday(newActivityData$date, wday=1:5))
return("Weekday")
if(isWeekday(newActivityData$date, wday=1:5))
return(Weekday)
newActivityData$Weekday <- as.factors(isWeekday(newActivityData$date, wday=1:5),Weekday,Weekend)
newActivityData$Weekday <- as.factor(isWeekday(newActivityData$date, wday=1:5),Weekday,Weekend)
newActivityData$Weekday <- as.factor(isWeekday(newActivityData$date, wday=1:5),"Weekday","Weekend")
newActivityData$Weekday <- as.factor(isWeekday(newActivityData$date, wday=1:5))
newActivityData$Weekday <- as.factor(if(isWeekday(newActivityData$date, wday=1:5))return("Weekday") else return("Weekend"))
newActivityData$Weekday <- isWeekday(newActivityData$date, wday=1:5)
newActivityData$Wkday <- factor(new$Weekday, labels=c("Weekday","Weekend"))
newActivityData$Weekday <- isWeekday(newActivityData$date, wday=1:5)
newActivityData$Wkday <- factor(new$Weekday, labels=c("Weekday","Weekend"))
newActivityData$Weekday <- isWeekday(newActivityData$date, wday=1:5)
newActivityData$Wkday <- factor(newActivityData$Weekday, labels=c("Weekday","Weekend"))
library(timeDate)
newActivityData$Weekday <- isWeekday(newActivityData$date, wday=1:5)
newActivityData$Wkday <- factor(newActivityData$Weekday, labels=c("Weekend","Weekday"))
newActivityData$Wday <- factor((isWeekday(newActivityData$date, wday=1:5)), labels=c("Weekend","Weekday"))
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r processfile, echo=TRUE}
activityData <- read.csv(unzip(zipfile='activity.zip'))
```
## What is mean total number of steps taken per day?
```{r dailyMean, echo=TRUE}
library(ggplot2)
stepDailyMean <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(stepDailyMean, col='green', xlab='Total Number of Steps Each Day')
dailyMean <- mean(stepDailyMean, na.rm = TRUE)
dailyMedian <- median(stepDailyMean, na.rm = TRUE)
```
The daily mean of steps taken is `r dailyMean` and the daily median is `r dailyMedian`.
## What is the average daily activity pattern?
```{r dailyPattern, echo=TRUE}
intervalAverages <- aggregate(x=list(steps=activityData$steps),
by=list(interval=activityData$interval),
FUN=mean, na.rm=TRUE)
plot(intervalAverages$interval,intervalAverages$steps,
type="l",
xlab="Interval",
ylab="Number of Steps",
main="Average Number of Steps per Interval")
maxAverage <- intervalAverages[which.max(intervalAverages$steps),]
```
The 5 minute interval with the maximum average of steps takenacross the dataset is interval `r maxAverage$interval` with `r maxAverage$steps` steps.
## Imputing missing values
```{r missingValues, echo=TRUE}
missingValues <- sum(is.na(activityData))
```
Total number of missing vlues in the dataset is `r missingValues`.
```{r fillingData, echo=TRUE}
newActivityData <- activityData
for (i in 1:nrow(newActivityData)) {
if (is.na(newActivityData$steps[i])) {
newActivityData$steps[i] <- intervalAverages$steps[intervalAverages$interval==newActivityData$interval[i]]
}
}
```
New dataset created to with missing step values replaced with the value from the repective mean of 5-minute interval.
The new data set is called newActivityData.
```{r newplot, echo=TRUE}
newStepDailyMean <- tapply(newActivityData$steps, newActivityData$date, sum)
hist(newStepDailyMean, col='blue', xlab='Total Number of Steps Each Day')
newDailyMean <- mean(newStepDailyMean)
newDailyMedian <- median(newStepDailyMean)
```
The daily mean for the new dataset without missing values is `r newDailyMean` and the daily median for the new dataset is `r newDailyMedian`.
The new mean and median values for the new dataset are higher than the mean and mediam from the orginal dataset as missing values have been replaced with the mean values of the respective interval mean.
## Are there differences in activity patterns between weekdays and weekends?
```{r dayOfWeek, echo=TRUE}
library(timeDate)
newActivityData$DayOfWeek <- factor((isWeekday(newActivityData$date, wday=1:5)),
labels=c("Weekend","Weekday"))
```
newAverages <- aggregate(x=list(steps=newActivityData$steps),
by=list(interval=newActivityData$interval,DayOfWeek=new$DayOfWeek),
FUN=mean)
newAverages <- aggregate(steps ~ interval + DayOfWeek, newActivityData, FUN=mean)
View(newAverages)
View(newAverages)
library(lattice)
newAverages <- aggregate(steps ~ interval + DayOfWeek, newActivityData, FUN=mean)
xyplot(newAverages$steps ~ newAverages$interval|newAverages$DayOfWeek,
layout=c(1,2),
type="l",
main="Average number of Steps per Interval seperated by Weekday and Weekend Activities",
xlab="Interval",
ylab="Steps"
)
newStepDailyMean
mean(newStepDailyMean)
median(newStepDailyMean)
mode(newStepDailyMean)
mean(stepDailyMean)
median(stepDailyMean)
stepDailyMean
stepDailyMean <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
newStepDailyMean <- tapply(newActivityData$steps, newActivityData$date, sum, na.rm=TRUE)
mean(newStepDailyMean)
median(newStepDailyMean)
newStepDailyMean
stepDailyMean
newStepDailyMean
